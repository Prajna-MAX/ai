import numpy as np 
import pandas as pd 
from keras import models 
from keras.models import Sequential 
from keras.layers import Dense 
from keras import layers 
from sklearn.model_selection import train_test_split 
from sklearn import preprocessing 
import matplotlib.pyplot as plt 
dataframe = pd.read_csv('pima-indians-diabetes.csv', delimiter=',') 
dataframe.head() 
# split into input (X) and output (y) variables 
X = dataframe.iloc[:,:8] 
y = dataframe.iloc[:,8] 
dataframe.shape 
(767, 9) 
features_train,features_test,target_train,target_test=train_test_split(X,y,
 test_size=0.33,random_state=0) 

network=models.Sequential() 
network.add(Dense(units=8,activation="relu",input_shape=(features_train.sha
 pe[1],))) 
network.add(Dense(units=8,activation="relu")) 
#network.add(Dense(units=16,activation="relu")) 
network.add(Dense(units=1,activation="sigmoid")) 

network.compile(loss='binary_crossentropy', optimizer='adam', 
metrics=['accuracy'])  

#network.fit(features_train,features_test, epochs=10, 
batch_size=100,verbose=2) 
history=network.fit(features_train,target_train,epochs=20,verbose=1,batch_s
 ize=100,validation_data=(features_test,target_test)) 

training_loss=history.history["loss"] 
test_loss=history.history["val_loss"] 
epoch_count=range(1,len(training_loss)+1) 
plt.plot(epoch_count,training_loss,"r--") 
plt.plot(epoch_count,test_loss,"b-") 
plt.legend(["Training Loss","Test Loss"]) 
plt.xlabel("Epoch") 
plt.ylabel("Loss") 
plt.show() 
_, accuracy = network.evaluate(features_train,target_train) 
print('Accuracy: %.2f' % (accuracy*100)) 

Accuracy: 63.16 

predicted_target= network.predict(features_test) 
_, accuracy = network.evaluate(features_test,target_test) 
print('Accuracy: %.2f' % (accuracy*100)) 

Accuracy: 60.24 
#Y=target_train 
for i in range(10): 
print(predicted_target[i]) 
[0.44970706] 
[0.4993118] 
[0.9906837] 
[0.44786653] 
[0.02075692] 
[0.03176354] 
[0.999443] 
[0.5751261] 
[0.04377431] 
[0.8482277] 
training_accuracy=history.history["accuracy"] 
test_accuracy=history.history["val_accuracy"] 
plt.plot(epoch_count,training_accuracy,"r--") 
plt.plot(epoch_count,test_accuracy,"b-") 
plt.legend(["Training Accuracy","Test Accuracy"]) 
plt.xlabel("Epoch") 
plt.ylabel("Accuracy Score") 
plt.show() 
